resourceDir: resources
size: 720p
background:
  audio: background-music.mp3
  volume: 0.3
scenes:
  - image: icecream-child.jpeg
    duration: 2
  - image: icecream-child.jpeg
    narration: >
      This tutorial will teach you how to create a serverless Node JS application with Dynamo DB to store and retrieve data.
  - video: app-diagram-serverless-host.mov
    narration: >
      First, lets see the ingredients:
        - a serverless host – Where you’re going to deploy and execute your code and connect to a database. We’re going with AWS. It has a pay-per-use compute service AWS Lambda. Because Lambda is just a compute service without “outside access”, we also need an “access point” or a “front door” service AWS API Gateway.
  - video: app-diagram-deployment.mov
    narration: >
      a development and deployment tool – to speed up the way you build your services. We’re going to use Claudia JS - a tool that automates the deployment process of your service to your AWS Lambda.
  - video: app-diagram-service.mov
    narration: >
      a service – your service that receives a request, saves an ice cream to a database or shows all ice creams you saved.
  - video: app-diagram-database.mov
    narration: >
      a database — a storage where you want to store your icecream data. We’re going with DynamoDB — the AWS noSQL database.
  - video: start-account.mov
    narration: >
      Before we start, you need to have an AWS account and a locally set AWS credentials file. If you don't have one, open up your browser and go to https://console.aws.amazon.com. Click on the “Create a new AWS account” button and follow the process.
  - image: aws-services.png
    narration: >
      Now you need only to set your AWS credentials. Open AWS Console, click on “Services” in the top navigation bar. Write IAM in the search box and click on the resulted IAM. Click on “Users” on the left side menu, then “Add User”.
  - video: create-user.mov
    narration: >
      Type in some user name and check “Programmatic access”. Then click the "Next Permissions" button.
      Now click the “Attach existing policies directly” and then check the “Administrator Full Access”. Proceed to the 3rd step “Review”, and then click the “Create user” for the 4th step. At the last (4th) step, you will see a table with your user name and columns with your user’s “Access Key Id” and “Secret Access Key Id”. Copy those values.
  - slide: |
      # OSX / Unix - AWS Credentials
      ## How should the file look
      ```bash
      [default]
      aws_access_key_id = YourAWSAccessKeyID
      aws_secret_access_key = YourAWSSecretAccessKey
      ```
    narration: >
      Add those keys to your .aws/credentials file. On OSX or Unix systems it is in ~/.aws. On Win its in C:/Users/<your-user>/.aws
      You will set the AWS_PROFILE environment variable to default.
  - video: npm-install.mov
    narration: >
      Now, you need to setup Claudia JS.
      Open your terminal and run
      npm install -g claudia
      After it finishes, Claudia JS should be now installed globally, and will be available for all of your projects...
  - video: setup-project.mp4
    narration: >
      Now comes the most interesting part! Create your project folder (you can name it ice-cream-shop) and open it in your terminal. Then initialize your Node project by running npm init -y...
      Now run npm install aws-sdk claudia-api-builder -S...
      This installs AWS SDK and Claudia API Builder. You will need AWS SDK for accessing DynamoDB. Claudia API Builder is a tool for handling routing in your service with an Express-like syntax for your endpoints. 
  - video: index-code.mov
    narration: > 
      The last step is to create a file named index js. The file should contain your service logic. As you can see, your service first includes claudia-api-builder and aws-sdk. Using Claudia API Builder, you expose two routes
      1. POST icecreams - to save an icecream
      2. GET icecreams - to get all stored icecreams
      You will be using Dynamo DB client methods put and scan to store and get all icecreams. But, you don't have a database still, right? That means you need to create one.
  - image: create-dynamo-ui.png
    narration: >
      Creating a database on AWS can be done in two ways. First way is by doing it via AWS Console UI. You can go to the AWS Dynamo DB Tables, click on the “Create Table” button and then, as on the screen, type icecreams as the table name and icecreamid as the primary key. Then you'd click “Create”.
  - image: aws-cli-dynamodb-command.png
    narration: >
      The second way is via AWS CLI (with a single command) in your command line. To be able to run this command, you will need to have AWS CLI installed. There are available easy installers for both Windows and Mac.
  - video: windows-msi-installer.mp4
    narration: >
      If you're using a Windows, there is a MSI Installer available. Just follow the documentation instructions, to download and then install the AWS CLI on your system.
  - video: mac-bundled-installer.mp4
    narration: >
      If you're using a Mac/Unix, there is a Bundled Installer available as well. Just follow the listed commands on its corresponding page. 
  - slide: |
      ## Create a DynamoDB table
      ```bash
      aws dynamodb create-table --table-name icecreams \
      --attribute-definitions AttributeName=icecreamid,AttributeType=S \
      --key-schema AttributeName=icecreamid,KeyType=HASH \
      --provisioned-throughput ReadCapacityUnits=1,WriteCapacityUnits=1 \
      --region us-east-1 \
      --query TableDescription.TableArn --output text
      ```
    narration: >
      When you have it installed now you need to run the command to create a DynamoDB table named "icecreams" in the same region as your AWS Lambda, with a key attribute icecreamid, which should be type of String. 
      The command returns the table’s Amazon Resource Name (ARN) to confirm that everything is set up correctly. If you’ve followed properly one those two ways, you should have successfully setup your database.
  - slide: |
      ## Add DynamoDB Policy
      ```json
      {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "dynamodb:DeleteItem",
              "dynamodb:GetItem",
              "dynamodb:PutItem",
              "dynamodb:Scan"
            ],
            "Effect": "Allow",
            "Resource": "*"
          }
        ]
      }
      ```
    narration: >
      The last step to allow your service access to your DynamoDB database. To do that your service requires a permission policy. Instead of doing it via AWS Console, you can create a policy file, containing the JSON on the screen, in your project and then apply it with Claudia.
  - video: dynamodb-policy.mp4
    narration: >
      Inside your ice-cream-shop project folder, create a folder policy and in it a file called dynamodb-policy json. This policy allows your Lambda service to access your DynamoDb database. When invoking Claudia to deploy your code, this policy file location needs to be passed as the deploy option to let Claudia know to assign the policy to your Lambda.
  - slide: |
      ## Add DynamoDB Policy
      ```json
      {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "dynamodb:DeleteItem",
              "dynamodb:GetItem",
              "dynamodb:PutItem",
              "dynamodb:Scan"
            ],
            "Effect": "Allow",
            "Resource": "*"
          }
        ]
      }
      ```
    narration: >
      Again, you have on the screen the JSON needed for the policy. Feel free to pause the tutorial if needed. Because now it's time for deployment!
  - video: claudia-create-app.mp4
    narration: >
      For your first deployment, Claudia needs to create a Lambda for your service. Open the project folder ice-cream-shopand run "claudia create --region us-east-1 --api-module index --policies policy".
      This command creates your serverless container (AWS Lambda) in the region "us-east-1", sets the index file as the main service file, and assigns the policy from the policy folder to your Lambda.
  - image: deployment-result.png
    narration: >
      If the command is successful, it should returns the created service URL endpoint in the final output, similar to this one on the screen.
  - slide: |
      ## curl GET all icecreams
      ```bash
      curl https://your-service-url.execute-api.us-east-1.amazonaws.com/latest/icecreams
      ```
    narration: >
      To test your service, you will now need to run a cURL command which would get the available icecreams from your service. Be sure to replace the "your-service" placeholder, with your actual service url.
  - slide: |
      ## curl GET all icecreams
      ```bash
      curl -H "Content-Type: application/json" -X POST -d '{"icecreamId":"123", "name":"chocolate"}' https://your-service-url.execute-api.us-east-1.amazonaws.com/latest/icecreams
      ```
    narration: >
      To save an ice cream, you'll need to run a cURL command which posts the data to your service. Again, be sure to replace the "your-service" placeholder, with your actual service url. That's it. 
  - image: thats-it.png
    narration: >
      By running these commands you’ll see your service working! That’s it! Your service is up and running and you have created your first serverless Node js application. Congratulations! Thank you for watching this tutorial, if you have questions be sure to ask. Hope you learned a lot and see you soon!
       


  


